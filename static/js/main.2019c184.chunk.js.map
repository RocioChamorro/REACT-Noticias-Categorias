{"version":3,"sources":["components/Header.js","components/Noticia.js","components/ListaNoticias.js","components/Formulario.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","href","Noticia","noticia","url","urlToImage","title","description","source","imagen","src","alt","name","target","ListaNoticias","noticias","map","key","Formulario","state","categoria","cambioCategoria","e","setState","value","props","consultarNoticia","onChange","this","Component","App","a","fetch","respuesta","json","console","log","articles","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRAUeA,EARA,SAAC,GAAD,IAAEC,EAAF,EAAEA,OAAF,OACX,yBAAKC,UAAU,mCACf,uBAAGC,KAAK,KAAKD,UAAU,qBAAqBD,GAD5C,MC4BWG,EA7BC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACTC,EAAgDD,EAAhDC,IAAKC,EAA2CF,EAA3CE,WAAYC,EAA+BH,EAA/BG,MAAOC,EAAwBJ,EAAxBI,YAAaC,EAAWL,EAAXK,OACvCC,EAAUJ,EAAc,yBAAKL,UAAU,cAC7C,yBAAKU,IAAKL,EAAYM,IAAKL,IAC3B,0BAAMN,UAAU,cAAcQ,EAAOI,OAC9B,KAEP,OACE,yBAAKZ,UAAU,iBACX,yBAAKA,UAAU,QACVS,EACD,yBAAKT,UAAU,gBACX,4BAAKM,GACL,2BAAIC,IAER,yBAAKP,UAAU,eACX,uBAAGC,KAAMG,EAAKS,OAAO,SAASb,UAAU,gCAAxC,4BCADc,EAfO,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OAClB,yBAAKf,UAAU,OACVe,EAASC,KAAI,SAAAb,GAAO,OACjB,kBAAC,EAAD,CACIc,IAAKd,EAAQC,IACbD,QAASA,SCsCVe,E,2MA3CbC,MAAQ,CACNC,UAAW,W,EAEbC,gBAAkB,SAAAC,GAChB,EAAKC,SACH,CAEEH,UAAWE,EAAET,OAAOW,QAEtB,WACE,EAAKC,MAAMC,iBAAiB,EAAKP,MAAMC,e,wEAM3C,OACE,yBAAKpB,UAAU,gBACb,yBAAKA,UAAU,wBACb,8BACE,oEACA,yBAAKA,UAAU,oCACb,4BAAQ2B,SAAUC,KAAKP,iBACrB,4BAAQG,MAAM,WAAd,WACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,iBAAd,mBACA,4BAAQA,MAAM,UAAd,SACA,4BAAQA,MAAM,WAAd,YACA,4BAAQA,MAAM,UAAd,YACA,4BAAQA,MAAM,cAAd,0B,GA9BSK,aCwCVC,E,2MApCbX,MAAQ,CACNJ,SAAU,I,EAMZW,iB,sBAAmB,8CAAAK,EAAA,6DAAOX,EAAP,+BAAmB,UAC9BhB,EADW,mEACuDgB,EADvD,qDAGOY,MAAM5B,GAHb,cAGX6B,EAHW,gBAIMA,EAAUC,OAJhB,OAIXnB,EAJW,OAKjBoB,QAAQC,IAAIrB,GACZ,EAAKQ,SAAS,CACZR,SAAUA,EAASsB,WAPJ,4C,mFAFjBT,KAAKF,qB,+BAaL,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,CACE3B,OAAO,uBAET,kBAAC,EAAD,CACE2B,iBAAkBE,KAAKF,mBAEzB,yBAAK1B,UAAU,uCACb,kBAAC,EAAD,CACEe,SAAUa,KAAKT,MAAMJ,iB,GA7Bfc,aCOES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2019c184.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nconst Header = ({titulo}) => (\r\n    <nav className=\"nav-wrapper light-blue darken-3\">\r\n    <a href=\"#!\" className=\"brand-logo center\">{titulo}</a> {/* enlace q no lleva a NINGÚ LADO */}\r\n    </nav>\r\n);\r\nHeader.propTypes = {\r\n    titulo : PropTypes.string.isRequired\r\n}\r\nexport default Header;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nconst Noticia = ({ noticia }) => {\r\n  const { url, urlToImage, title, description, source } = noticia;\r\n  const imagen = (urlToImage) ? <div className=\"card-image\">\r\n  <img src={urlToImage} alt={title} />\r\n  <span className=\"card-title\">{source.name}</span>\r\n</div> : null\r\n\r\n  return ( \r\n    <div className=\"col s12 m6 l4\">\r\n        <div className=\"card\">\r\n            {imagen}\r\n            <div className=\"card-content\">\r\n                <h3>{title}</h3>\r\n                <p>{description}</p>\r\n            </div>\r\n            <div className=\"card-action\">\r\n                <a href={url} target=\"-blank\" className=\"waves-effect waves-light btn\">\r\n                    Ver Noticia Completa\r\n\r\n                </a>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n  );\r\n};\r\nNoticia.propTypes = {\r\n    noticia : PropTypes.object.isRequired\r\n}\r\nexport default Noticia;\r\n","import React from 'react';\r\nimport Noticia from './Noticia';\r\nimport PropTypes from 'prop-types';\r\nconst ListaNoticias = ({noticias}) => (\r\n    <div className=\"row\">\r\n        {noticias.map(noticia=>(\r\n            <Noticia\r\n                key={noticia.url} \r\n                noticia={noticia}\r\n            />\r\n        ))}\r\n\r\n    </div>\r\n\r\n);\r\nListaNoticias.propTypes = {\r\n    noticias : PropTypes.array.isRequired\r\n}\r\nexport default ListaNoticias;","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nclass Formulario extends Component {\r\n  state = {\r\n    categoria: \"general\"\r\n  };\r\n  cambioCategoria = e => {\r\n    this.setState(\r\n      {\r\n        //como segundo parámetro se le puede pasar un colback para qu actualice de INMEDIATO\r\n        categoria: e.target.value\r\n      },\r\n      () => {\r\n        this.props.consultarNoticia(this.state.categoria);\r\n      }\r\n    );\r\n    //pasarlo a la pagina principal, actualizar el state de APP\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"buscador row\">\r\n        <div className=\"col s12 m8 offset-m2\">\r\n          <form>\r\n            <h2>Encuentra Noticias por Categorías</h2>\r\n            <div className=\"input-field col s12 m8 offset-m2\">\r\n              <select onChange={this.cambioCategoria}>\r\n                <option value=\"general\">General</option>\r\n                <option value=\"business\">Negocios</option>\r\n                <option value=\"entertainment\">Entretenimiento</option>\r\n                <option value=\"health\">Salud</option>\r\n                <option value=\"science\">Ciencias</option>\r\n                <option value=\"sports\">Deportes</option>\r\n                <option value=\"technology\">Tecnología</option>\r\n              </select>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nFormulario.propTypes = {\r\n    consultarNoticia : PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;\r\n","import React, { Component, Fragment } from 'react';\nimport Header from './components/Header';\nimport ListaNoticia from './components/ListaNoticias';\nimport Formulario from './components/Formulario';\n\nclass App extends Component {\n  state = {\n    noticias: []\n  };\n  /*es recomendable que el llamado de una API se haga en el sgte. método del cilo de vida*/\n  componentDidMount() {\n    this.consultarNoticia();\n  }\n  consultarNoticia = async (categoria = 'general') => {\n    const url = `https://newsapi.org/v2/top-headlines?country=us&category=${categoria}&apiKey=72e33197eaf24cc4bedf23c11fb45553`;\n\n    const respuesta = await fetch(url); //retorna una promesa, la promesa es asignada a \"respuesta\", con await le decimos q js se detenga hasta en cuando encuentre await hasta q resuelva esta promesa, le decimos q se detenga y no continue hasta q se resueva, es decir hasta q nos dé el resultado.\n    const noticias = await respuesta.json();\n    console.log(noticias);\n    this.setState({\n      noticias: noticias.articles\n    });\n  };\n  render() {\n    return (\n      <Fragment>\n        <Header \n          titulo='Noticias REACT API'\n        />\n        <Formulario\n          consultarNoticia={this.consultarNoticia}\n        />\n        <div className=\"container white contenedor-noticias\">\n          <ListaNoticia\n            noticias={this.state.noticias}\n          />\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}